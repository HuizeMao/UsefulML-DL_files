#define early stopping
Val_loss_increased = EarlyStopping(monitor='val_loss', mode = 'min', verbose=1, patience=8)
Train_NotImproved = EarlyStopping(monitor='acc', mode = 'max', verbose=1, baseline = 0.3, patience = 5)
mc = ModelCheckpoint('Inception_2.h5', monitor='val_acc', mode='max', verbose=1, save_best_only=True)

#fit
history = model.fit(X_train, Y_train, batch_size = m,epochs = 30,verbose = 1, validation_data = (X_CV,Y_CV),shuffle=True, callbacks=[Val_loss_increased, Train_NotImproved,mc])

###save model
##model.save('model.h5')

#evaluate
preds = model.evaluate(X_CV, Y_CV)

print ("Loss = " + str(preds[0]))
print ("Test Accuracy = " + str(preds[1]))
#summary
model.summary()

#model history
# summarize history for accuracy
plt.plot(history.history['acc'])
plt.plot(history.history['val_acc'])
plt.title('model accuracy')
plt.ylabel('accuracy')
plt.xlabel('epoch')
plt.legend(['train', 'test'], loc='upper left')
plt.show()

# summarize history for loss
plt.plot(history.history['loss'])
plt.plot(history.history['val_loss'])
plt.title('model loss')
plt.ylabel('loss')
plt.xlabel('epoch')
plt.legend(['train', 'test'], loc='upper left')
plt.show()
